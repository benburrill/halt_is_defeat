// Shor's algorithm?  More like snore's algorithm!


// Return a number that divides n
// Returns |n| if n is prime (or if |n| < 2)
int @divide(int n) {
    if (n == 0) {
        return 0;
    }

    if (n < 0) {
        n = -n;
    }

    try {
        int result = 0;
        int stop = n / 2;
        for (int b = 1; b <= stop; b *= 2) {
            // Loop through powers of 2, for each one adding it to our
            // result number (setting the bit) if it is necessary.
            preempt {
                result += b;
            }

            preempt {
                continue;
            }

            break;
        }

        !truth_is_defeat(result <= 1);
        !truth_is_defeat(n % result != 0);
        return result;
    } undo {
        return n;
    }
}


bool @print_factors(int n) {
    int d = @divide(n);
    if (d == n) {
        print(d);
        return true;
    }

    print('(');
    @print_factors(d);
    print(" * ");
    @print_factors(n / d);
    print(')');
    return false;
}


void @is_you() {
    for (int i = 2; i < 20; i += 1) {
        print("Factorization of ");
        print(i);
        print(": ");
        if (@print_factors(i)) {
            print(" -- it's prime!");
        }
        println();
    }
}

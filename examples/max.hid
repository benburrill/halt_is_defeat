// Compare these two inputs.  This algorithm returns early as soon as it
// finds the max value, so it is much faster if the max value is at the
// beginning of the array.

// int[] input = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
int[] input = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];

int @max(const int[] arr) {
    try {
        int max_val = arr[0];
        for (int i = 1; i < arr.length; i += 1) {
            if (arr[i] > max_val) {
                max_val = arr[i];
                preempt {
                    // There are no larger values, so return early.
                    return max_val;
                }
            }
        }

        // Reaching the end of the array without returning is defeat
        !is_defeat();
    } undo {
        // First item was the max, return it
        // The typechecker knows !is_defeat() is guaranteed defeat, so
        // we can put the return here without it complaining.
        return arr[0];
    }
}

void print_array(const int[] arr) {
    print('[');
    for (int i = 0; i < arr.length; i += 1) {
        if (i != 0) {
            print(", ");
        }
        print(arr[i]);
    }
    print(']');
}

void @is_you() {
    print("Array: ");
    print_array(input);
    println();
    print("Max value: ");
    println(@max(input));
}
